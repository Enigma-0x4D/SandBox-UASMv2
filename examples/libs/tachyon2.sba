%if (!tachyon_lib_def)
%define global tachyon_lib_def 1
%define global core_included 1

%include "errors.sba"

%define global CR  R12
%define global DWR R13
%define global MSR R14
%define global RES R15

// Static registers are not affected by stack operations.
%define global ST0 R8
%define global ST1 R9
%define global ST2 R10
%define global ST3 R11
%define global ST4 CR
%define global ST5 DWR
%define global ST6 MSR
%define global ST7 RES

// Comparison flag bitmasks
%define global comp_ulss 0b00000001 // a <u b
%define global comp_slss 0b00000010 // a <s b
%define global comp_ugrt 0b00000100 // a >u b
%define global comp_sgrt 0b00001000 // a >s b
%define global comp_eql  0b00010000 // a == b
%define global comp_neq  0b00100000 // a != b
%define global comp_zf   0b01000000 // a == 0
%define global comp_zs   0b10000000 // b == 0

%file_def "nop" // nop
    %if (%argn != 0)
        %error err_invalid_argument_count "0"
    %endif
    
    _2n16
%file_end

%file_def "hlt" // hlt
    %if (%argn != 0)
        %error err_invalid_argument_count "0"
    %endif
    
    _2i16 0x1000
%file_end

%file_def "jmp" // jmp <cond> <addr:lo> <addr:hi>
    %if (%argn != 3)
        %error err_invalid_argument_count "3"
    %endif
    
    _2i4r4r4r4 0x2 %arg0 %arg1 %arg2
%file_end

%file_def "ldi" // ldi <dest> <val>
    %if (%argn != 2)
        %error err_invalid_argument_count "2"
    %endif
    
    _2i4r4i8 0x3 %arg0 %arg1
%file_end

%file_def "st" // st <src> <lo> <hi>
    %if (%argn != 3)
        %error err_invalid_argument_count "3"
    %endif
    
    _2i4r4r4r4 0x4 %arg0 %arg1 %arg2
%file_end

%file_def "ld" // ld <dest> <lo> <hi>
    %if (%argn != 3)
        %error err_invalid_argument_count "3"
    %endif
    
    _2i4r4r4r4 0x5 %arg0 %arg1 %arg2
%file_end

%file_def "ext" // ext <val1> <val2>
    %if (%argn != 2)
        %error err_invalid_argument_count "2"
    %endif
    
    _2i8r4r4 0x60 %arg0 %arg1
%file_end

%file_def "psh" // psh <val>
    %if (%argn != 1)
        %error err_invalid_argument_count "1"
    %endif
    
    _2i8i8 0x70 %arg0
%file_end

%file_def "oper" // oper <op> <dest> <a> <b>
    %if (%argn - 1 != 3)
        %error err_invalid_argument_count "3"
    %endif
    
    _2i4r4r4r4 %arg0 %arg1 %arg2 %arg3
%file_end

%file_def "oper1v" // oper <op> <dest> <a>
    %if (%argn - 1 != 2)
        %error err_invalid_argument_count "2"
    %endif
    
    _2i4r4r4r4 %arg0 %arg1 %arg2 %arg2
%file_end

%define eval libPath "/" + %path

%define global eval nop %include (libPath + "nop")
%define global eval hlt %include (libPath + "hlt")
%define global eval jmp %include (libPath + "jmp")
%define global eval ldi %include (libPath + "ldi")
%define global eval st  %include (libPath + "st")
%define global eval ld  %include (libPath + "ld")
%define global eval ext %include (libPath + "ext")
%define global eval psh %include (libPath + "psh")

%define global eval add %include (libPath + "oper") 0x8
%define global eval sub %include (libPath + "oper") 0x9
%define global eval mul %include (libPath + "oper") 0xA
%define global eval div %include (libPath + "oper") 0xB
%define global eval bsh %include (libPath + "oper") 0xC
%define global eval nor %include (libPath + "oper") 0xD
%define global eval not %include (libPath + "oper1v") 0xD
%define global eval and %include (libPath + "oper") 0xE
%define global eval or  %include (libPath + "oper") 0xF
%define global eval mov %include (libPath + "oper1v") 0xF

%endif

/*
= INSTRUCTION SYNTAX =================================
OPER{xxxx} REGW{xxxx} ARGS{xxxx xxxx}
OPER{xxxx} REGW{xxxx} REG1{xxxx} REG2{xxxx}

= REGISTER LAYOUT IN MEMORY ==========================
R0  R1  R2  R3  R4  R5  R6  R7
ST0 ST1 ST2 ST3 CR  DWR MSR RES

= OPERAION CODES =====================================
[0 0000] - NOP
[1 0001] - HLT
[2 0010] - JMP (REG1 | (REG2 << 8)) IF (REGW != 0)
[3 0011] - REGW = ARGS
[4 0100] - [MSR][REG1 | (REG2 << 8)] = REGW
[5 0101] - REGW = [MSR][REG1 | (REG2 << 8)]
[6 0110] - EXT REG1 REG2
[7 0111] - SP += ARGS

[8 1000] - REGW = REG1 + REG2    CR = (REG1 + REG2) >> 8
[9 1001] - REGW = REG1 - REG2    CR = COMP*
[A 1010] - REGW = REG1 * REG2    CR = (REG1 * REG2) >> 8
[B 1011] - REGW = REG1 / REG2    CR = REG1 % REG2
[C 1100] - REGW = REG1 >> REG2   CR = REG1 << REG2
[D 1101] - REGW = !(REG1 | REG2) CR = !(REG1 ^ REG2)
[E 1110] - REGW = REG1 & REG2    CR = !(REG1 & REG2)
[F 1111] - REGW = REG1 | REG2    CR = REG1 ^ REG2

======================================================

*
(REG1 < REG2)(unsigned)        |     <-- BORROW
((REG1 < REG2)(signed)   << 1) |
((REG1 > REG2)(unsigned) << 2) |
((REG1 > REG2)(signed)   << 3) |
(REG1 == REG2            << 4) |
(REG1 != REG2            << 5) |
(REG1 == 0               << 6) |
(REG2 == 0               << 7)
*/